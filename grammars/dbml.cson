# If this is your first time writing a language grammar check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

"scopeName": "source.dbml"
"name": "DBML"
"fileTypes": "dbml"
"patterns": [
    {
      "include": "#structures"
    }
    {
      "include": "#comments"
    }
    {
      "include": "#strings"
    }
    {
      "include": "#relationships"
    }
    {
      "name": "keyword.control.dbml"
      "match": "\\b(?i)as\\b"
    }
    {
      "begin": "\\{"
      "end": "\\}"
      "patterns": [
        {
          "include": "#comments"
        }
        {
          "include": "#strings"
        }
        {
          "include": "#keywords"
        }
        {
          "include": "#structures"
        }
        {
          "begin": "\\["
          "end": "\\]"
          "patterns": [
            {
              "include": "#structures"
            }
            {
              "include": "#strings"
            }
            {
              "include": "#booleans"
            }
            {
              "include": "#relationships"
            }
          ]
        }
      ]
    }
]
"repository": {
  "structures": {
    "comment": "Main data structure tags"
    "name": "entity.name.type.dbml"
    "match": "\\b([pP]roject|[tT]able|[rR]ef|[eE]num|[iI]ndexes|[nN]ote|[tT]able[gG]roup)\\b"
  }
  "keywords": {
    "name": "keyword.dbml"
    "match": "\\b(as|by|bool|boolean|bit|blob|decimal|double|enum|float|long|longblob|longtext|medium|mediumblob|mediumint|mediumtext|time|timestamp|timestamptz|tinyblob|tinyint|tinytext|text|bigint|int|int1|int2|int3|int4|int8|integer|float|float4|float8|double|char|varbinary|varchar|varcharacter|precision|date|datetime|year|unsigned|signed|numeric|ucase|lcase|mid|len|round|rank|now|format|coalesce|ifnull|isnull|nvl)\\b"
  }
  "comments":
      "name": "comment.line.double-slash"
      "match": "//.*$"
  "booleans": {
    "name": "variable.parameter.dbml"
    "match": "\\b(true|false)\\b"
  }
  "relationships": {
    "comment": "Relationship operators"
    "name": "support.type.dbml"
    "match": "[<>\\-]"
  }
  "strings": {
    "patterns": [
      {
        "include": "#mlstrings"
      }
      {
        "include": "#sqstrings"
      }
      {
        "include": "#dqstrings"
      }
      {
        "include": "#btstrings"
      }
    ]
  }
  "sqstrings": {
    "name": "string.quoted.single.dbml"
    "begin": "'"
    "end": "'"
    "patterns": [
      {
        "include": "#escapes"
      }
    ]
  }
  "dqstrings": {
    "name": "string.quoted.double.dbml"
    "begin": "[\"]"
    "end": "[\"]"
    "patterns": [
      {
        "include": "#escapes"
      }
    ]
  }
  "btstrings": {
    "name": "string.quoted.single.dbml"
    "begin": "[`]"
    "end": "[`]"
    "patterns": [
      {
        "include": "#escapes"
      }
    ]
  }
  "mlstrings": {
    "name": "string.quoted.single.dbml"
    "begin": "'''"
    "end": "'''"
    "patterns": [
      {
        "name": "constant.character.escape.dbml"
        "match": "\\\\'''"
      }
      {
        "include": "#escapes"
      }
      {
        "name": "constant.character.escape.dbml"
        "match": "\\\\"
      }
    ]
  }
  "escapes": {
    "name": "constant.character.escape.dbml"
    "match": "\\\\."
  }
}
